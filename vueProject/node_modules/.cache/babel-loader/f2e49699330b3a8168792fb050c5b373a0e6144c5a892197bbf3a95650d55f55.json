{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"measure-main\"\n};\nconst _hoisted_2 = {\n  class: \"contents\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"background\"\n}, [/*#__PURE__*/_createCommentVNode(\" <div style=\\\"height:140vh;\\\">\\r\\n                <select class=\\\"select_group\\\" v-model=\\\"selected_company\\\" @change=\\\"change_company(selected_company)\\\">\\r\\n                  <option v-for=\\\"item in group_list\\\" :key=\\\"item\\\">{{ item }}</option>\\r\\n                </select>\\r\\n                <span class=\\\"header-page\\\" style=\\\"margin:0\\\">탄소 배출량 예측 전체보기<br>\\r\\n                    <span class=\\\"subHeader-page\\\">Predicted Carbon emission Overview</span>\\r\\n                </span>\\r\\n\\r\\n                <div id=\\\"wrap1\\\">\\r\\n                    <div style=\\\"height:15vh\\\"><predict_dash1 class=\\\"dash\\\"/></div>\\r\\n                    <predict_dash2 :key=\\\"rerender_signal\\\" class=\\\"dash\\\" id=\\\"dash2\\\"/>\\r\\n                </div>\\r\\n                \\r\\n                <div id=\\\"wrap2\\\" style=\\\"margin-top:2vh\\\">\\r\\n                    <predict_dash3 :key=\\\"rerender_signal\\\" class=\\\"dash\\\"/>\\r\\n                    <predict_dash4  :key=\\\"rerender_signal\\\" class=\\\"dash\\\" id=\\\"dash4\\\"/>\\r\\n                    \\r\\n                </div>\\r\\n                <predict_dash5 :key=\\\"rerender_signal\\\" class=\\\"dash\\\"  id=\\\"dash5\\\"/>\\r\\n              </div> \")], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_navigation = _resolveComponent(\"navigation\");\n  const _component_predict_header = _resolveComponent(\"predict_header\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_navigation, {\n    class: \"navigation\"\n  }), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_predict_header), _hoisted_3])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createCommentVNode","_createElementBlock","_hoisted_1","_createVNode","_component_navigation","_hoisted_2","_component_predict_header","_hoisted_3"],"sources":["C:\\Users\\user\\Desktop\\CarbonVueproject\\co2-emission-management\\vueProject\\src\\views\\Predict\\predictCarbonPreview.vue"],"sourcesContent":["<template>\r\n  <div class=\"measure-main\">\r\n      <navigation class=\"navigation\"/>\r\n      <div class=\"contents\">\r\n          <predict_header/>\r\n          <div class=\"background\">\r\n            <!-- <div style=\"height:140vh;\">\r\n                <select class=\"select_group\" v-model=\"selected_company\" @change=\"change_company(selected_company)\">\r\n                  <option v-for=\"item in group_list\" :key=\"item\">{{ item }}</option>\r\n                </select>\r\n                <span class=\"header-page\" style=\"margin:0\">탄소 배출량 예측 전체보기<br>\r\n                    <span class=\"subHeader-page\">Predicted Carbon emission Overview</span>\r\n                </span>\r\n\r\n                <div id=\"wrap1\">\r\n                    <div style=\"height:15vh\"><predict_dash1 class=\"dash\"/></div>\r\n                    <predict_dash2 :key=\"rerender_signal\" class=\"dash\" id=\"dash2\"/>\r\n                </div>\r\n                \r\n                <div id=\"wrap2\" style=\"margin-top:2vh\">\r\n                    <predict_dash3 :key=\"rerender_signal\" class=\"dash\"/>\r\n                    <predict_dash4  :key=\"rerender_signal\" class=\"dash\" id=\"dash4\"/>\r\n                    \r\n                </div>\r\n                <predict_dash5 :key=\"rerender_signal\" class=\"dash\"  id=\"dash5\"/>\r\n              </div> -->\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n\r\n<style>\r\n.background{\r\n    background:#F7F9FB;\r\n    min-height:86vh;\r\n    height: inherit;\r\n    padding:3vh 2.5vw;\r\n}\r\n.header-page{\r\n    color:#5A5A5A;\r\n    font-size:1.5rem;\r\n    font-weight :600;\r\n}\r\n.subHeader-page{\r\n    color:#5A5A5A;\r\n    font-size:1rem;\r\n    font-weight:200;\r\n}\r\n#wrap1 > * {\r\n    float: left;\r\n}\r\n\r\n#wrap1::after {\r\n    content: \"\";\r\n    display: block;\r\n    clear: both;\r\n}\r\n#wrap2 > * {\r\n    margin-top:3vh;\r\n    float: left;\r\n}\r\n\r\n#dash2{\r\n    margin-left:2vw;\r\n}\r\n\r\n#dash4{\r\n    margin-left:2vw\r\n}\r\n#dash5{\r\n    float:right; \r\n    margin-right:2vw;\r\n    margin-top:3vh\r\n}\r\n</style>\r\n\r\n<script>\r\nimport navigation from \"@/components/Navigation.vue\"\r\nimport predict_header from \"@/components/predict/Header.vue\"\r\nimport predict_dash1 from \"@/components/predict/dash1/dash1.vue\"\r\nimport predict_dash2 from \"@/components/predict/dash2/dash2.vue\"\r\nimport predict_dash3 from \"@/components/predict/dash3/dash3.vue\"\r\nimport predict_dash4 from \"@/components/predict/dash4/dash4.vue\"\r\nimport predict_dash5 from \"@/components/predict/dash5/dash5.vue\"\r\nimport {useStore} from 'vuex'\r\nimport {ref, computed} from 'vue'\r\nimport axios from 'axios'\r\n\r\n  export default {\r\n      name :\"predict\",\r\n      components:{\r\n          navigation,\r\n          predict_header,\r\n          predict_dash1,\r\n          predict_dash2,\r\n          predict_dash3,\r\n          predict_dash4,\r\n          predict_dash5,\r\n      },\r\n      setup() {\r\n        var store = useStore()\r\n        var group_list = computed(() => store.state.group_list).value\r\n        var selected_company = ref(group_list[0])\r\n        store.commit(\"insight_select_company\",selected_company.value)\r\n        \r\n        var now = new Date();\t// 현재 날짜 및 시간\r\n        var year = ref(now.getFullYear())\t// 년도\r\n        var lastmonth= new Date(now)\r\n        lastmonth.setMonth(lastmonth.getMonth() - 5)\r\n\r\n        var rerender_signal = ref(0)\r\n\r\n        const config = {\r\n            headers:{\r\n                Authorization:\"Bearer\"+\" \"+store.state.accessToken,\r\n            }\r\n        }\r\n\r\n        //카테고리별 다음달 예측\r\n        async function get_predict_category_next_month(){\r\n\r\n            store.commit(\"insight_select_company\",selected_company.value)\r\n\r\n            var url = \"/CarbonPrediction/CategoryPrediction/\"+selected_company.value\r\n            await axios.get(url,config).then(res=>{\r\n                store.commit('getNextMonthcategory',res.data)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n            .finally(()=>{\r\n                rerender_signal.value +=1\r\n            })\r\n\r\n\r\n            //현재 총 데이터 url 하드코딩 해놓음\r\n            var url = \"/CarbonEmission/PartEmission/\"+selected_company.value+\"/\"+year.value+\"-\"+\"01\"+\"-01/\"+year.value+\"-\"+\"06\"+\"-28/0\"\r\n            await axios.get(url,config).then(res=>{\r\n                store.commit('getTotalLastDataList',res.data)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n            .finally(()=>{\r\n                rerender_signal.value +=1\r\n            })\r\n            \r\n            //총 데이터 예측 url 하드코딩 해놓음\r\n            var url = \"/CarbonPrediction/PartPrediction/\"+selected_company.value+\"/0\"\r\n            await axios.get(url,config).then(res=>{\r\n                store.commit('getPredictTotal',res.data)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                store.commit('getPredictTotal',[])\r\n            })\r\n            .finally(()=>{\r\n                rerender_signal.value +=1\r\n            })\r\n        }\r\n\r\n        \r\n        // async function get_total_data_now(){\r\n    \r\n        //     var url = \"/CarbonEmission/PartEmission/\"+selected_company.value+\"/\"+year.value+\"-\"+\"01\"+\"-01/\"+year.value+\"-\"+\"06\"+\"-28/0\"\r\n        //     await axios.get(url,config).then(res=>{\r\n        //         store.commit('getTotalLastDataList',res.data)\r\n        //     })\r\n        //     .catch(error => {\r\n        //         console.log(error)\r\n        //     })\r\n        //     .finally(()=>{\r\n\r\n        //     })\r\n        // }\r\n\r\n        \r\n        // async function get_total_Predict_data_now(){\r\n        //     var url = \"/CarbonPrediction/PartPrediction/\"+selected_company.value+\"/0\"\r\n        //     await axios.get(url,config).then(res=>{\r\n        //         store.commit('getPredictTotal',res.data)\r\n        //     })\r\n        //     .catch(error => {\r\n        //         console.log(error)\r\n        //         store.commit('getPredictTotal',[])\r\n        //     })\r\n        //     .finally(()=>{\r\n        //         rerender_signal.value +=1\r\n        //     })\r\n        // }\r\n\r\n        console.log('1', selected_company.value)\r\n        get_predict_category_next_month()\r\n\r\n        function change_company(){\r\n            store.commit(\"insight_select_company\",selected_company.value)\r\n            console.log('1', selected_company.value)\r\n            get_predict_category_next_month()\r\n            rerender_signal.value +=1\r\n        }\r\n        return{\r\n            group_list,\r\n            selected_company,\r\n            change_company,\r\n            rerender_signal,\r\n        }\r\n      },\r\n      created(){\r\n      },  \r\n      mounted(){\r\n        this.rerender_signal +=1\r\n      }\r\n  }\r\n</script>"],"mappings":";;EACOA,KAAK,EAAC;AAAc;;EAEhBA,KAAK,EAAC;AAAU;gCAEjBC,mBAAA,CAqBQ;EArBHD,KAAK,EAAC;AAAY,I,aACrBE,mBAAA,uoCAmBY,C;;;;;uBAxBtBC,mBAAA,CA2BQ,OA3BRC,UA2BQ,GA1BJC,YAAA,CAAgCC,qBAAA;IAApBN,KAAK,EAAC;EAAY,IAC9BC,mBAAA,CAwBQ,OAxBRM,UAwBQ,GAvBJF,YAAA,CAAiBG,yBAAA,GACjBC,UAqBQ,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}