{"ast":null,"code":"import progressDonutGraph from '@/components/nature/progress/dash1/progressDonutGraph.ts';\nimport { ref, computed } from 'vue';\nimport { useStore } from 'vuex';\nexport default {\n  name: \"progressChart\",\n  components: {\n    progressDonutGraph\n  },\n  setup() {\n    var store = useStore();\n    //서버\n    var carbonLastEmissions = computed(() => store.state.getTotalLastData);\n    var carbonEmissions = computed(() => store.state.getTotalNowData);\n    var carbonEmissionsGoal = computed(() => store.state.getTargetData);\n    var now = new Date(); // 현재 날짜 및 시간\n    var year = ref(now.getFullYear()); // 년도\n\n    async function get_Base_Info() {\n      var url = \"/CarbonNature/Evaluation/\" + selected_company.value;\n      axios.get(url, config).then(res => {\n        store.commit('getBaseYear', res.data.BaseYear);\n        store.commit('getBaseData', res.data.BaseEmissions);\n      }).catch(error => {\n        console.log(error);\n        store.commit('getBaseYear', 0);\n        store.commit('getBaseData', 0);\n      }).finally(() => {\n        rerender_signal.value += 1;\n      });\n    }\n    return {\n      carbonEmissions,\n      carbonEmissionsGoal,\n      carbonLastEmissions,\n      year\n    };\n  }\n};","map":{"version":3,"names":["progressDonutGraph","ref","computed","useStore","name","components","setup","store","carbonLastEmissions","state","getTotalLastData","carbonEmissions","getTotalNowData","carbonEmissionsGoal","getTargetData","now","Date","year","getFullYear","get_Base_Info","url","selected_company","value","axios","get","config","then","res","commit","data","BaseYear","BaseEmissions","catch","error","console","log","finally","rerender_signal"],"sources":["C:\\Users\\user\\Desktop\\CarbonVueproject\\co2-emission-management\\vueProject\\src\\components\\scenario\\dash3\\progressChart.vue"],"sourcesContent":["<template>\r\n    <div> \r\n        <div class=\"title-border-scenario\">진행상황 및 기대효과</div>\r\n        <router-link to=\"/nature/progress\" style=\"text-decoration: none;\"><div class=\"scenario-title\">총 탄소량 대비 감축된 탄소량</div></router-link>\r\n        <div class=\"scenario-frame\">\r\n            <div class=\"dash-text-middle\" style=\"font-size:1.8em\">〈 {{year}}년 〉</div>\r\n            <div style=\"padding-top: 3vh\">\r\n                <progressDonutGraph style=\"margin: auto; display: block; height: 35vh; width: 20vw;\"></progressDonutGraph>\r\n            </div>\r\n            <div style=\"margin: 5vh 0 3vh 3vw\">\r\n                <div style=\"font-size: 1vw; font-weight: bold; color: #5A5A5A;\">현재 총 탄소 배출량\r\n                    <div style=\"font-size: 1.5vw; color: #163945;\">{{carbonEmissions}} <span>CO2eq</span></div>\r\n                </div>\r\n                <div style=\"margin-top:3vh; font-size: 1vw; font-weight: bold; color: #5A5A5A;\">감축 목표 탄소 배출량\r\n                    <div style=\"font-size: 1.5vw; color: #3DC984;\">{{ carbonLastEmissions - carbonEmissionsGoal}} <span>CO2eq</span></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n        \r\n\r\n</template>\r\n\r\n<style>\r\n\r\n</style>\r\n\r\n\r\n<script>\r\nimport progressDonutGraph from '@/components/nature/progress/dash1/progressDonutGraph.ts';\r\nimport {ref, computed} from 'vue'\r\nimport {useStore} from 'vuex'\r\n    export default {\r\n        name :\"progressChart\",\r\n        components:{\r\n            progressDonutGraph\r\n        },\r\n        setup() {\r\n            var store = useStore()\r\n            //서버\r\n            var carbonLastEmissions = computed(()=>store.state.getTotalLastData) \r\n            var carbonEmissions = computed(()=> store.state.getTotalNowData)\r\n            var carbonEmissionsGoal = computed(()=> store.state.getTargetData)\r\n            var now = new Date();\t// 현재 날짜 및 시간\r\n            var year = ref(now.getFullYear())\t// 년도\r\n\r\n            async function get_Base_Info(){\r\n                var url = \"/CarbonNature/Evaluation/\"+selected_company.value\r\n                    axios.get(url,config).then(res=>{\r\n                    store.commit('getBaseYear',res.data.BaseYear)\r\n                    store.commit('getBaseData',res.data.BaseEmissions)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    store.commit('getBaseYear',0)\r\n                    store.commit('getBaseData',0)\r\n                })\r\n                .finally(()=>{\r\n                    rerender_signal.value +=1\r\n                })\r\n            }\r\n\r\n            return{\r\n                carbonEmissions,\r\n                carbonEmissionsGoal,\r\n                carbonLastEmissions,\r\n                year\r\n            }\r\n        }\r\n        \r\n    }\r\n</script>"],"mappings":"AA6BA,OAAOA,kBAAiB,MAAO,0DAA0D;AACzF,SAAQC,GAAG,EAAEC,QAAQ,QAAO,KAAI;AAChC,SAAQC,QAAQ,QAAO,MAAK;AACxB,eAAe;EACXC,IAAG,EAAG,eAAe;EACrBC,UAAU,EAAC;IACPL;EACJ,CAAC;EACDM,KAAKA,CAAA,EAAG;IACJ,IAAIC,KAAI,GAAIJ,QAAQ,EAAC;IACrB;IACA,IAAIK,mBAAkB,GAAIN,QAAQ,CAAC,MAAIK,KAAK,CAACE,KAAK,CAACC,gBAAgB;IACnE,IAAIC,eAAc,GAAIT,QAAQ,CAAC,MAAKK,KAAK,CAACE,KAAK,CAACG,eAAe;IAC/D,IAAIC,mBAAkB,GAAIX,QAAQ,CAAC,MAAKK,KAAK,CAACE,KAAK,CAACK,aAAa;IACjE,IAAIC,GAAE,GAAI,IAAIC,IAAI,EAAE,EAAE;IACtB,IAAIC,IAAG,GAAIhB,GAAG,CAACc,GAAG,CAACG,WAAW,EAAE,GAAE;;IAElC,eAAeC,aAAaA,CAAA,EAAE;MAC1B,IAAIC,GAAE,GAAI,2BAA2B,GAACC,gBAAgB,CAACC,KAAI;MACvDC,KAAK,CAACC,GAAG,CAACJ,GAAG,EAACK,MAAM,CAAC,CAACC,IAAI,CAACC,GAAG,IAAE;QAChCpB,KAAK,CAACqB,MAAM,CAAC,aAAa,EAACD,GAAG,CAACE,IAAI,CAACC,QAAQ;QAC5CvB,KAAK,CAACqB,MAAM,CAAC,aAAa,EAACD,GAAG,CAACE,IAAI,CAACE,aAAa;MACrD,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;QACZC,OAAO,CAACC,GAAG,CAACF,KAAK;QACjB1B,KAAK,CAACqB,MAAM,CAAC,aAAa,EAAC,CAAC;QAC5BrB,KAAK,CAACqB,MAAM,CAAC,aAAa,EAAC,CAAC;MAChC,CAAC,EACAQ,OAAO,CAAC,MAAI;QACTC,eAAe,CAACf,KAAI,IAAI;MAC5B,CAAC;IACL;IAEA,OAAM;MACFX,eAAe;MACfE,mBAAmB;MACnBL,mBAAmB;MACnBS;IACJ;EACJ;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}