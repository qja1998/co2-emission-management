{"ast":null,"code":"import navigation from \"@/components/Navigation.vue\";\nimport predict_header from \"@/components/predict/Header.vue\";\nimport predict_categoryLineGraph from \"@/components/predict/categoryLineGraph/categoryLineGraph.vue\";\nimport predict_categoryStickGraph from \"@/components/predict/categoryStickGraph/categoryStickGraph.vue\";\nimport { ref, computed } from 'vue';\nimport { useStore } from 'vuex';\nimport axios from 'axios';\nexport default {\n  name: \"predict\",\n  components: {\n    navigation,\n    predict_header,\n    predict_categoryLineGraph,\n    predict_categoryStickGraph\n  },\n  setup() {\n    var store = useStore();\n    var kindOfGraph = ref('line');\n    //그룹명\n    var user_group = computed(() => store.state.user_group);\n    var selected_company = computed(() => store.state.insight_selected_company);\n    console.log('선 그래프 선택 그룹', selected_company.value);\n    //날짜 \n    var now = new Date(); // 현재 날짜 및 시간\n    var year = now.getFullYear(); // 년도\n    var month = now.getMonth() + 1; //월\n    var rerender_signal = ref(0);\n    const config = {\n      headers: {\n        Authorization: \"Bearer\" + \" \" + store.state.accessToken\n      }\n    };\n\n    //총 데이터 예측 url 하드코딩 해놓음\n    async function get_total_Predict_data_now() {\n      var url = \"/CarbonPrediction/PartPrediction/\" + selected_company.value + \"/0\";\n      axios.get(url, config).then(res => {\n        store.commit('getPredictTotal', res.data);\n      }).catch(error => {\n        console.log(error);\n        store.commit('getPredictTotal', []);\n      }).finally(() => {\n        rerender_signal.value += 1;\n      });\n    }\n\n    //카테고리별 예측 url\n    async function get_category_Predict_data_now() {\n      var url = \"/CarbonPrediction/PartPrediction/\" + selected_company.value + \"/1\";\n      axios.get(url, config).then(res => {\n        store.commit('getPredictCategory', res.data);\n      }).catch(error => {\n        console.log(error);\n      }).finally(() => {});\n    }\n\n    //작년 카테고리별 데이터 하드코딩 해놓음\n    async function get_last_category_data() {\n      var url = \"/CarbonEmission/PartEmission/\" + selected_company.value + \"/\" + year + \"-01-01/\" + year + \"-\" + month + \"-28/1\";\n      axios.get(url, config).then(res => {\n        store.commit('getTotalLastCategoryDataList', res.data);\n      }).catch(error => {\n        console.log(error);\n      }).finally(() => {});\n    }\n    get_total_Predict_data_now();\n    get_category_Predict_data_now();\n    get_last_category_data();\n    const clickLine = () => {\n      get_total_Predict_data_now();\n      get_last_category_data();\n      kindOfGraph.value = 'line';\n    };\n    const clickBar = () => {\n      get_total_Predict_data_now();\n      get_category_Predict_data_now();\n      get_last_category_data();\n      kindOfGraph.value = 'stick';\n      console.log(kindOfGraph);\n    };\n    return {\n      kindOfGraph,\n      clickLine,\n      clickBar,\n      rerender_signal\n    };\n  },\n  mounted() {\n    this.rerender_signal = +1;\n  }\n};","map":{"version":3,"names":["navigation","predict_header","predict_categoryLineGraph","predict_categoryStickGraph","ref","computed","useStore","axios","name","components","setup","store","kindOfGraph","user_group","state","selected_company","insight_selected_company","console","log","value","now","Date","year","getFullYear","month","getMonth","rerender_signal","config","headers","Authorization","accessToken","get_total_Predict_data_now","url","get","then","res","commit","data","catch","error","finally","get_category_Predict_data_now","get_last_category_data","clickLine","clickBar","mounted"],"sources":["C:\\Users\\user\\Desktop\\CarbonVueproject\\co2-emission-management\\vueProject\\src\\views\\Predict\\predictCategoryDetailLine.vue"],"sourcesContent":["<template>\r\n  <div class=\"measure-main\">\r\n    <navigation class=\"navigation\" />\r\n    <div class=\"contents\">\r\n      <predict_header />\r\n      <div class=\"background\">\r\n          <div class=\"header-page\">카테고리별 탄소배출량 예측 전체보기\r\n            <span class=\"radio-group\">\r\n              <div class=\"radio\">\r\n                <input type=\"radio\" name=\"radio\" id=\"clickbtn\" checked=\"checked\" value=\"line\" @click=\"clickLine()\"/>\r\n                <label for=\"clickbtn\" style=\"margin-right: 5px;\">선 그래프</label>\r\n                <input type=\"radio\" name=\"radio\" id=\"clickbtn-non\" value=\"stick\" @click=\"clickBar()\"/>\r\n                <label for=\"clickbtn-non\">막대 그래프</label>\r\n              </div>\r\n            </span><br>\r\n            <span class=\"subHeader-page\">Predicted Carbon emission Overview</span>\r\n            <div >  \r\n              <span class=\"wrap\" v-if=\"kindOfGraph == 'stick'\">\r\n                <predict_categoryStickGraph :key=\"rerender_signal\" class=\"categoryStickGraph\"/>\r\n              </span>\r\n              <span class=\"wrap\"  v-else-if=\"kindOfGraph == 'line'\">\r\n                <predict_categoryLineGraph :key=\"rerender_signal\" class=\"categoryLineGraph\"/>\r\n              </span>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.wrap > * {\r\n  margin-top: 5vh;\r\n}\r\n.radio {\r\n  margin: 0 0.25rem;\r\n  float: right;\r\n  display: inline;\r\n}\r\n.radio-group{\r\n  display: inline;\r\n}\r\n.radio label {\r\n    font-size:16px;\r\n    background: #fff;\r\n    border: 1px solid #ddd;\r\n    padding: 0.5rem 1.25rem;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    color: #444;\r\n    transition: box-shadow 400ms ease;\r\n}\r\n.radio label:hover{\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);\r\n}\r\n.radio input[type=radio] {\r\n  display: none;\r\n}\r\n.radio input[type=radio]:checked + label {\r\n  background-color: #3DC984;\r\n  color: #fff;\r\n  border-color: #3DC984;\r\n}\r\n</style>\r\n\r\n<script>\r\nimport navigation from \"@/components/Navigation.vue\"\r\nimport predict_header from \"@/components/predict/Header.vue\"\r\nimport predict_categoryLineGraph from \"@/components/predict/categoryLineGraph/categoryLineGraph.vue\"\r\nimport predict_categoryStickGraph from \"@/components/predict/categoryStickGraph/categoryStickGraph.vue\"\r\nimport {ref, computed } from 'vue';\r\nimport {useStore} from 'vuex'\r\nimport axios from 'axios'\r\nexport default {\r\n  name: \"predict\",\r\n  components: {\r\n    navigation,\r\n    predict_header,\r\n    predict_categoryLineGraph,\r\n    predict_categoryStickGraph\r\n  },\r\n\r\n  setup(){\r\n    var store = useStore()\r\n    var kindOfGraph = ref('line')\r\n   //그룹명\r\n    var user_group = computed(()=> store.state.user_group)\r\n    var selected_company = computed(()=> store.state.insight_selected_company)\r\n    console.log('선 그래프 선택 그룹',selected_company.value)\r\n    //날짜 \r\n    var now = new Date();\t// 현재 날짜 및 시간\r\n    var year = now.getFullYear()\t// 년도\r\n    var month = now.getMonth()+1 //월\r\n    var rerender_signal = ref(0)\r\n        \r\n    const config = {\r\n      headers:{\r\n          Authorization:\"Bearer\"+\" \"+store.state.accessToken,\r\n      }\r\n    }\r\n\r\n    \r\n    //총 데이터 예측 url 하드코딩 해놓음\r\n    async function get_total_Predict_data_now(){\r\n        var url = \"/CarbonPrediction/PartPrediction/\"+selected_company.value+\"/0\"\r\n        axios.get(url,config).then(res=>{\r\n            store.commit('getPredictTotal',res.data)\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            store.commit('getPredictTotal',[])\r\n        })\r\n        .finally(()=>{\r\n            rerender_signal.value +=1\r\n        })\r\n    }\r\n\r\n    //카테고리별 예측 url\r\n    async function get_category_Predict_data_now(){\r\n      var url = \"/CarbonPrediction/PartPrediction/\"+selected_company.value+\"/1\"\r\n      axios.get(url,config).then(res=>{\r\n          store.commit('getPredictCategory',res.data)\r\n      })\r\n      .catch(error => {\r\n          console.log(error)\r\n      })\r\n      .finally(()=>{\r\n      })\r\n    }\r\n\r\n    //작년 카테고리별 데이터 하드코딩 해놓음\r\n    async function get_last_category_data(){\r\n      var url = \"/CarbonEmission/PartEmission/\"+selected_company.value+\"/\"+year+\"-01-01/\"+year+\"-\"+month+\"-28/1\"\r\n      axios.get(url,config).then(res=>{\r\n          store.commit('getTotalLastCategoryDataList',res.data)\r\n          })\r\n          .catch(error => {\r\n          console.log(error)\r\n          })\r\n          .finally(()=>{\r\n      })\r\n    }\r\n\r\n    get_total_Predict_data_now()\r\n    get_category_Predict_data_now()\r\n    get_last_category_data()\r\n\r\n    const clickLine = () => {\r\n      get_total_Predict_data_now()\r\n      get_last_category_data()\r\n      kindOfGraph.value='line'\r\n    }\r\n    const clickBar = () => {\r\n      get_total_Predict_data_now()\r\n      get_category_Predict_data_now()\r\n      get_last_category_data()\r\n      kindOfGraph.value='stick'\r\n      console.log(kindOfGraph)\r\n    }\r\n    return{\r\n      kindOfGraph,clickLine,clickBar,rerender_signal\r\n    }\r\n  },\r\n  mounted(){\r\n    this.rerender_signal =+1\r\n  }\r\n  \r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}