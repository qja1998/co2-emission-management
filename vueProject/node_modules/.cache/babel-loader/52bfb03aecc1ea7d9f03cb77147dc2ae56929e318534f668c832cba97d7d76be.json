{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  style: {}\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"title-border\"\n}, \"다음달 총 탄소 배출량 예측\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"frame\",\n  id: \"frame-dash4\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"dash4-text\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"span\", null, \"KgCO2eq\", -1 /* HOISTED */);\nconst _hoisted_6 = {\n  key: 0,\n  style: {\n    \"color\": \"#3DC984\"\n  }\n};\nconst _hoisted_7 = {\n  key: 1,\n  style: {\n    \"color\": \"#FF0000\"\n  }\n};\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"span\", null, \"　vs last month\", -1 /* HOISTED */);\nconst _hoisted_9 = {\n  key: 1,\n  class: \"dash4-text\"\n};\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"span\", null, \"MgCO2eq\", -1 /* HOISTED */);\nconst _hoisted_11 = {\n  key: 0,\n  style: {\n    \"color\": \"#3DC984\"\n  }\n};\nconst _hoisted_12 = {\n  key: 1,\n  style: {\n    \"color\": \"#FF0000\"\n  }\n};\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"span\", null, \"　vs last month\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [$setup.total_emission.predictData < 1000 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createTextVNode(_toDisplayString($setup.total_emission.predictData) + \" \", 1 /* TEXT */), _hoisted_5, _createElementVNode(\"div\", null, [$setup.percent < 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_6, \"↘\" + _toDisplayString(-$setup.percent) + \"%\", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $setup.percent > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_7, \"↗\" + _toDisplayString($setup.percent) + \"%\", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _hoisted_8])])) : $setup.total_emission.predictData > 1000 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createTextVNode(_toDisplayString($setup.total_emission.predictData) + \" \", 1 /* TEXT */), _hoisted_10, _createElementVNode(\"div\", null, [$setup.percent < 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_11, \"↘\" + _toDisplayString(-$setup.percent) + \"%\", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $setup.percent > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_12, \"↗\" + _toDisplayString($setup.percent) + \"%\", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _hoisted_13])])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["style","_createElementVNode","class","id","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","$setup","total_emission","predictData","_hoisted_4","_hoisted_5","percent","_hoisted_6","_toDisplayString","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13"],"sources":["C:\\Users\\user\\Desktop\\CarbonVueproject\\co2-emission-management\\vueProject\\src\\components\\predict\\dash4\\dash4.vue"],"sourcesContent":["<template>\r\n    <div style=\"\">\r\n        <div class=\"title-border\">다음달 총 탄소 배출량 예측</div>\r\n        <div class=\"frame\" id=\"frame-dash4\">\r\n            <div class=\"dash4-text\" v-if=\"total_emission.predictData < 1000\">{{total_emission.predictData}}\r\n                <span>KgCO2eq</span>\r\n                <div>\r\n                    <span v-if=\"percent<0\" style=\"color:#3DC984\">↘{{-percent}}%</span>\r\n                    <span v-if=\"percent>0\" style=\"color:#FF0000\">↗{{percent}}%</span>\r\n                    <span>　vs last month</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"dash4-text\"  v-else-if=\"total_emission.predictData >1000\">{{total_emission.predictData}}\r\n                <span>MgCO2eq</span>\r\n                <div>\r\n                    <span v-if=\"percent<0\" style=\"color:#3DC984\">↘{{-percent}}%</span>\r\n                    <span v-if=\"percent>0\" style=\"color:#FF0000\">↗{{percent}}%</span>\r\n                    <span>　vs last month</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<style>\r\n    #frame-dash4{\r\n        width:20vw;\r\n    }\r\n    .dash4-text{\r\n        margin:6vh 1.3vw;\r\n        color:#163945;\r\n        height:15vh;\r\n        line-height:6vh;\r\n        display: inline-block;\r\n        font-size:6.5vh;\r\n        font-weight: 900;\r\n    }\r\n    .dash4-text > span {\r\n        font-size:3vh;\r\n        margin-left:1vw;\r\n        display: inline-block;\r\n    }\r\n    .dash4-text > div {\r\n        color:#A8A8A8;\r\n        font-size:2vh;\r\n    }\r\n</style>\r\n\r\n\r\n<script>\r\nimport {ref,computed} from 'vue'\r\nimport {useStore} from 'vuex'\r\n\r\n    export default {\r\n        name :\"predict_dash4\",\r\n        setup(){\r\n            var store = useStore()\r\n            //그룹명, 날짜\r\n            var selected_company = computed(()=> store.state.insight_selected_company)\r\n            var user_group = computed(()=> store.state.user_group)\r\n            var now = new Date();\t// 현재 날짜 및 시간\r\n            var year = now.getFullYear()\t// 년도\r\n            var month = now.getMonth() //월\r\n\r\n            //서버\r\n            var server_total_data = computed(()=> store.state.getTotalLastDataList)\r\n            var server_predict_total_data = computed(()=> store.state.getPredictTotal)\r\n\r\n            var total_emission = ref({\r\n                data:0,\r\n                predictData:0\r\n            })\r\n\r\n            console.log(server_predict_total_data.value)\r\n            total_emission.value.data = server_total_data.value[month]\r\n            total_emission.value.predictData = server_predict_total_data.value[0]\r\n\r\n            console.log(total_emission.value)\r\n\r\n            var percent =Math.round(percentage(total_emission.value))\r\n            function percentage(value){\r\n                return ((value.predictData-value.data)/value.data)*100\r\n            }\r\n\r\n            if(total_emission.value.predictData>1000){\r\n                // total_emission.value.predictData = Math.round(total_emission.value.predictData / 1000 , 10)\r\n            }\r\n            return{total_emission,percent}\r\n        },\r\n        components:{\r\n        \r\n        }\r\n    }\r\n</script>"],"mappings":";;EACSA,KAAQ,EAAR;AAAQ;gCACTC,mBAAA,CAA+C;EAA1CC,KAAK,EAAC;AAAc,GAAC,iBAAe;;EACpCA,KAAK,EAAC,OAAO;EAACC,EAAE,EAAC;;;;EACbD,KAAK,EAAC;;gCACPD,mBAAA,CAAoB,cAAd,SAAO;;;EAEcD,KAAqB,EAArB;IAAA;EAAA;;;;EACAA,KAAqB,EAArB;IAAA;EAAA;;gCACvBC,mBAAA,CAA2B,cAArB,gBAAc;;;EAIvBC,KAAK,EAAC;;iCACPD,mBAAA,CAAoB,cAAd,SAAO;;;EAEcD,KAAqB,EAArB;IAAA;EAAA;;;;EACAA,KAAqB,EAArB;IAAA;EAAA;;iCACvBC,mBAAA,CAA2B,cAArB,gBAAc;;;uBAjBpCG,mBAAA,CAqBM,OArBNC,UAqBM,GApBFC,UAA+C,EAC/CL,mBAAA,CAkBM,OAlBNM,UAkBM,GAjB4BC,MAAA,CAAAC,cAAc,CAACC,WAAW,W,cAAxDN,mBAAA,CAOM,OAPNO,UAOM,G,kCAP6DH,MAAA,CAAAC,cAAc,CAACC,WAAW,IAAE,GAC3F,iBAAAE,UAAoB,EACpBX,mBAAA,CAIM,cAHUO,MAAA,CAAAK,OAAO,Q,cAAnBT,mBAAA,CAAkE,QAAlEU,UAAkE,EAArB,GAAC,GAAAC,gBAAA,EAAGP,MAAA,CAAAK,OAAO,IAAE,GAAC,mB,mCAC/CL,MAAA,CAAAK,OAAO,Q,cAAnBT,mBAAA,CAAiE,QAAjEY,UAAiE,EAApB,GAAC,GAAAD,gBAAA,CAAEP,MAAA,CAAAK,OAAO,IAAE,GAAC,mB,mCAC1DI,UAA2B,C,OAICT,MAAA,CAAAC,cAAc,CAACC,WAAW,W,cAA9DN,mBAAA,CAOM,OAPNc,UAOM,G,kCAPkEV,MAAA,CAAAC,cAAc,CAACC,WAAW,IAAE,GAChG,iBAAAS,WAAoB,EACpBlB,mBAAA,CAIM,cAHUO,MAAA,CAAAK,OAAO,Q,cAAnBT,mBAAA,CAAkE,QAAlEgB,WAAkE,EAArB,GAAC,GAAAL,gBAAA,EAAGP,MAAA,CAAAK,OAAO,IAAE,GAAC,mB,mCAC/CL,MAAA,CAAAK,OAAO,Q,cAAnBT,mBAAA,CAAiE,QAAjEiB,WAAiE,EAApB,GAAC,GAAAN,gBAAA,CAAEP,MAAA,CAAAK,OAAO,IAAE,GAAC,mB,mCAC1DS,WAA2B,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}