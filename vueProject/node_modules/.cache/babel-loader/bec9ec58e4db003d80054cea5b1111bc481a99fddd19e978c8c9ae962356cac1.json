{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { XlsxRead, XlsxTable, XlsxSheets, XlsxJson, XlsxWorkbook, XlsxSheet, XlsxDownload } from \"/home/hyemi/carbon/co2-emission-management/vueProject/node_modules/vue3-xlsx\";\nimport { useStore } from 'vuex';\nimport { ref } from 'vue';\nexport default {\n  components: {\n    XlsxRead,\n    XlsxTable,\n    XlsxSheets,\n    XlsxJson,\n    XlsxWorkbook,\n    XlsxSheet,\n    XlsxDownload\n  },\n  setup() {\n    var file = ref(null);\n    var selectedSheet = ref(null);\n    var sheetName = ref(null);\n    var sheets = ref([{\n      name: \"전력사용양식\",\n      data: [{\n        탄소배출내용: String,\n        시작날짜: Date,\n        종료날짜: Date,\n        배출시설명: null,\n        운영주체: null,\n        공급처: null,\n        전력사용량: Number\n      }]\n    }]);\n    var collection = ref([{\n      a: 1,\n      b: 2\n    }]);\n    var store = useStore();\n    function onChange(event) {\n      file.value = event.target.files ? event.target.files[0] : null;\n    }\n    function addSheet() {\n      sheets.push({\n        name: this.sheetName,\n        data: [...this.collection]\n      });\n      sheetName.value = '전력사용양식';\n    }\n    function registerExcel(sheets) {\n      var i;\n      for (i = 0; i < sheets.length; i++) {\n        console.log(i);\n        var info_list = {\n          Type: \"7\",\n          DetailType: \"전력\",\n          StartDate: excelSerialDateToJSDate(sheets[i].시작날짜),\n          EndDate: excelSerialDateToJSDate(sheets[i].종료날짜),\n          Location: \"\",\n          scope: 2,\n          data: sheets[i].전력사용량 + \"/\" + 'kg',\n          emissions: sheets[i].전력사용량 + 4,\n          Carbonunit: \"kg\",\n          CarbonActivity: sheets[i].탄소배출내용,\n          kind: \"\",\n          Division: {\n            건물명: \"\",\n            운영주체: \"\",\n            공급처: \"\"\n          }\n        };\n        console.log(info_list);\n        store.commit(\"SetTableContent\", info_list);\n      }\n    }\n\n    //엑셀 날짜 받아와서 타입에 맞춰 바꾸는 함수\n    function formatDate(date) {\n      var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [year, month, day].join('-');\n    }\n    function excelSerialDateToJSDate(excelSerialDate) {\n      const daysBeforeUnixEpoch = 70 * 365 + 19;\n      const hour = 60 * 60 * 1000;\n      return formatDate(new Date(Math.round((excelSerialDate - daysBeforeUnixEpoch) * 24 * hour) + 12 * hour));\n    }\n    ;\n    return {\n      file,\n      selectedSheet,\n      sheetName,\n      sheets,\n      collection,\n      onChange,\n      addSheet,\n      registerExcel\n    };\n  },\n  methods: {}\n};","map":{"version":3,"names":["XlsxRead","XlsxTable","XlsxSheets","XlsxJson","XlsxWorkbook","XlsxSheet","XlsxDownload","useStore","ref","components","setup","file","selectedSheet","sheetName","sheets","name","data","탄소배출내용","String","시작날짜","Date","종료날짜","배출시설명","운영주체","공급처","전력사용량","Number","collection","a","b","store","onChange","event","value","target","files","addSheet","push","registerExcel","i","length","console","log","info_list","Type","DetailType","StartDate","excelSerialDateToJSDate","EndDate","Location","scope","emissions","Carbonunit","CarbonActivity","kind","Division","건물명","commit","formatDate","date","d","month","getMonth","day","getDate","year","getFullYear","join","excelSerialDate","daysBeforeUnixEpoch","hour","Math","round","methods"],"sources":["/home/hyemi/carbon/co2-emission-management/vueProject/src/components/measure/Divide-carbon/excel/Power_usage_excel.vue"],"sourcesContent":["<template>\n    <div style=\"padding:15vh\">\n        <div style=\"font-size:4vh;\">엑셀 파일로 일괄 등록\n          <div style=\"font-size:2vh; font-weight:normal; margin-top:4vh\">엑셀파일을 이용하여 전력 사용에 대한 데이터를 한번에 등록할 수 있습니다.<br>\n            정해진 엑셀 양식을 다운로드 받아 양식에 따라 데이터를 작성 후 엑셀 파일을 업로드하면 전력 사용 내역이 일괄 등록됩니다.\n          </div>\n\n            <section>\n                <xlsx-workbook>\n                  <xlsx-sheet\n                      :collection=\"sheet.data\"\n                      v-for=\"sheet in sheets\"\n                      :key=\"sheet.name\"\n                      :sheet-name=\"sheet.name\"\n                  />\n                  <xlsx-download>\n                      <button class=\"excel-down-btn\">엑셀 양식 다운로드</button>\n                  </xlsx-download>\n                </xlsx-workbook>\n            </section>\n\n            <div style=\"border:1px solid #D4D4D4; padding:3vh 2vw 2vw 5vh; margin-top:5vh; border-radius: 1vh;\">\n              <span style=\"font-size:2vh; font-weight:bold; margin-right:2vw\"> 파일 선택 </span>\n              <input type=\"file\" @change=\"onChange\" />\n              <xlsx-read :file=\"file\">\n                <xlsx-sheets>\n                  <template #default=\"{sheets}\">\n                    <select v-model=\"selectedSheet\">\n                      <option v-for=\"sheet in sheets\" :key=\"sheet\" :value=\"sheet\">\n                        {{ sheet }}\n                      </option>\n                    </select>\n                  </template>\n                </xlsx-sheets>\n                <xlsx-json :sheet=\"selectedSheet\">\n                  <template #default=\"{collection}\">\n                    <button class =\"clickbtn\" style=\"float:right; margin-top:5vh\" @click=\"registerExcel(collection)\">엑셀 등록하기</button>\n                  </template>\n                </xlsx-json>\n              </xlsx-read>\n            </div>\n            \n        </div>\n      \n\n\n      \n    </div>\n  </template>\n  \n  <script>\n  import { XlsxRead, XlsxTable, XlsxSheets, XlsxJson, XlsxWorkbook, XlsxSheet, XlsxDownload } from \"/home/hyemi/carbon/co2-emission-management/vueProject/node_modules/vue3-xlsx\"\n  import {useStore} from 'vuex'\n  import {ref} from 'vue'\n  export default {\n    components: {\n      XlsxRead,\n      XlsxTable,\n      XlsxSheets,\n      XlsxJson,\n      XlsxWorkbook,\n      XlsxSheet,\n      XlsxDownload\n    },\n\n    setup(){\n      var file= ref(null)\n      var selectedSheet=ref(null)\n      var sheetName=ref(null)\n      var sheets=ref([\n        { name: \"전력사용양식\", \n          data: [\n            { 탄소배출내용: String, 시작날짜: Date, 종료날짜:Date, 배출시설명:null, 운영주체:null,공급처:null,전력사용량:Number}\n          ] \n        }\n      ])\n      var collection=ref([{a:1, b:2}])\n      var store = useStore()\n\n      function onChange(event){\n        file.value = event.target.files ? event.target.files[0] : null;\n      }\n\n      function addSheet(){\n        sheets.push({ name: this.sheetName, data: [...this.collection] });\n        sheetName.value = '전력사용양식';\n      }\n      function registerExcel(sheets){\n        var i\n        for(i=0; i<sheets.length; i++){\n          console.log(i)\n          var info_list={\n            Type:\"7\",\n            DetailType:\"전력\",\n            StartDate: excelSerialDateToJSDate(sheets[i].시작날짜),\n            EndDate:excelSerialDateToJSDate(sheets[i].종료날짜),\n            Location:\"\",\n            scope:2,\n            data:sheets[i].전력사용량+\"/\"+'kg',\n            emissions:sheets[i].전력사용량+4,\n            Carbonunit:\"kg\",\n            CarbonActivity:sheets[i].탄소배출내용,\n            kind:\"\",\n            Division:{건물명:\"\",운영주체:\"\",공급처:\"\"}\n          }\n          console.log(info_list)\n          \n          store.commit(\"SetTableContent\",info_list)\n        }\n      }\n      \n      //엑셀 날짜 받아와서 타입에 맞춰 바꾸는 함수\n      function formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n\n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n\n        return [year, month, day].join('-');\n      }\n      function excelSerialDateToJSDate (excelSerialDate) {\n        const daysBeforeUnixEpoch = 70 * 365 + 19;\n        const hour = 60 * 60 * 1000;\n        return formatDate(new Date(Math.round((excelSerialDate - daysBeforeUnixEpoch) * 24 * hour) + 12 * hour));\n      };\n      \n\n      return{\n        file,\n        selectedSheet,\n        sheetName,\n        sheets,\n        collection,\n        onChange,\n        addSheet,\n        registerExcel\n      }\n    },\n    methods: {\n\n      \n    }\n  };\n  </script>\n\n<style>\n  .excel-down-btn{\n    margin-top:3vh; \n    background: none; \n    border:none; \n    font-size:2vh; \n    color:#4FB0DA;\n    text-decoration: underline;\n  }\n  .excel-down-btn:hover{\n    cursor: pointer;\n  }\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}