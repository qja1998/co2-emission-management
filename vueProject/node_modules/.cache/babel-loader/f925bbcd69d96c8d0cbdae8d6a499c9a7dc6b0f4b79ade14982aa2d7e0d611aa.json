{"ast":null,"code":"import navigation from \"@/components/Navigation.vue\";\nimport predict_header from \"@/components/predict/Header.vue\";\nimport predict_categoryLineGraph from \"@/components/predict/categoryLineGraph/categoryLineGraph.vue\";\nimport predict_categoryStickGraph from \"@/components/predict/categoryStickGraph/categoryStickGraph.vue\";\nimport { ref } from 'vue';\nexport default {\n  name: \"predict\",\n  components: {\n    navigation,\n    predict_header,\n    predict_categoryLineGraph,\n    predict_categoryStickGraph\n  },\n  setup() {\n    var kindOfGraph = ref('line');\n\n    //카테고리별 예측 url\n    async function get_total_Predict_data_now() {\n      var url = \"/CarbonPrediction/PartPrediction/\" + selected_company.value + \"/1\";\n      axios.get(url, config).then(res => {\n        store.commit('getPredictCategory', res.data);\n      }).catch(error => {\n        console.log(error);\n      }).finally(() => {});\n    }\n\n    //작년 카테고리별 데이터 하드코딩 해놓음\n    async function get_last_category_data() {\n      var url = \"/CarbonEmission/PartEmission/\" + selected_company.value + \"/\" + year + \"-01-01/\" + year + \"-\" + month + \"-28/1\";\n      axios.get(url, config).then(res => {\n        store.commit('getTotalLastCategoryDataList', res.data);\n      }).catch(error => {\n        console.log(error);\n      }).finally(() => {});\n    }\n    get_total_Predict_data_now();\n    get_last_category_data();\n    const clickLine = () => {\n      kindOfGraph.value = 'line';\n    };\n    const clickBar = () => {\n      kindOfGraph.value = 'stick';\n      console.log(kindOfGraph);\n    };\n    return {\n      kindOfGraph,\n      clickLine,\n      clickBar\n    };\n  }\n};","map":{"version":3,"names":["navigation","predict_header","predict_categoryLineGraph","predict_categoryStickGraph","ref","name","components","setup","kindOfGraph","get_total_Predict_data_now","url","selected_company","value","axios","get","config","then","res","store","commit","data","catch","error","console","log","finally","get_last_category_data","year","month","clickLine","clickBar"],"sources":["C:\\Users\\user\\Desktop\\CarbonVueproject\\co2-emission-management\\vueProject\\src\\views\\Predict\\predictCategoryDetailLine.vue"],"sourcesContent":["<template>\r\n  <div class=\"measure-main\">\r\n    <navigation class=\"navigation\" />\r\n    <div class=\"contents\">\r\n      <predict_header />\r\n      <div class=\"background\">\r\n          <div class=\"header-page\">카테고리별 탄소배출량 예측 전체보기\r\n            <span class=\"radio-group\">\r\n              <div class=\"radio\">\r\n                <input type=\"radio\" name=\"radio\" id=\"clickbtn\" checked=\"checked\" value=\"line\" @click=\"clickLine()\"/>\r\n                <label for=\"clickbtn\" style=\"margin-right: 5px;\">선 그래프</label>\r\n                <input type=\"radio\" name=\"radio\" id=\"clickbtn-non\" value=\"stick\" @click=\"clickBar()\"/>\r\n                <label for=\"clickbtn-non\">막대 그래프</label>\r\n              </div>\r\n            </span><br>\r\n            <span class=\"subHeader-page\">Predicted Carbon emission Overview</span>\r\n            <div >  \r\n              <span class=\"wrap\" v-if=\"kindOfGraph == 'stick'\">\r\n                <predict_categoryStickGraph class=\"categoryStickGraph\"/>\r\n              </span>\r\n              <span class=\"wrap\"  v-else-if=\"kindOfGraph == 'line'\">\r\n                <predict_categoryLineGraph class=\"categoryLineGraph\"/>\r\n              </span>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.wrap > * {\r\n  margin-top: 5vh;\r\n}\r\n.radio {\r\n  margin: 0 0.25rem;\r\n  float: right;\r\n  display: inline;\r\n}\r\n.radio-group{\r\n  display: inline;\r\n}\r\n.radio label {\r\n    font-size:16px;\r\n    background: #fff;\r\n    border: 1px solid #ddd;\r\n    padding: 0.5rem 1.25rem;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    color: #444;\r\n    transition: box-shadow 400ms ease;\r\n}\r\n.radio label:hover{\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);\r\n}\r\n.radio input[type=radio] {\r\n  display: none;\r\n}\r\n.radio input[type=radio]:checked + label {\r\n  background-color: #3DC984;\r\n  color: #fff;\r\n  border-color: #3DC984;\r\n}\r\n</style>\r\n\r\n<script>\r\nimport navigation from \"@/components/Navigation.vue\"\r\nimport predict_header from \"@/components/predict/Header.vue\"\r\nimport predict_categoryLineGraph from \"@/components/predict/categoryLineGraph/categoryLineGraph.vue\"\r\nimport predict_categoryStickGraph from \"@/components/predict/categoryStickGraph/categoryStickGraph.vue\"\r\nimport {ref } from 'vue';\r\n\r\nexport default {\r\n  name: \"predict\",\r\n  components: {\r\n    navigation,\r\n    predict_header,\r\n    predict_categoryLineGraph,\r\n    predict_categoryStickGraph\r\n  },\r\n\r\n  setup(){\r\n    \r\n    var kindOfGraph = ref('line')\r\n\r\n    \r\n    //카테고리별 예측 url\r\n    async function get_total_Predict_data_now(){\r\n      var url = \"/CarbonPrediction/PartPrediction/\"+selected_company.value+\"/1\"\r\n      axios.get(url,config).then(res=>{\r\n          store.commit('getPredictCategory',res.data)\r\n      })\r\n      .catch(error => {\r\n          console.log(error)\r\n      })\r\n      .finally(()=>{\r\n      })\r\n    }\r\n\r\n    //작년 카테고리별 데이터 하드코딩 해놓음\r\n    async function get_last_category_data(){\r\n      var url = \"/CarbonEmission/PartEmission/\"+selected_company.value+\"/\"+year+\"-01-01/\"+year+\"-\"+month+\"-28/1\"\r\n      axios.get(url,config).then(res=>{\r\n          store.commit('getTotalLastCategoryDataList',res.data)\r\n          })\r\n          .catch(error => {\r\n          console.log(error)\r\n          })\r\n          .finally(()=>{\r\n      })\r\n    }\r\n\r\n    get_total_Predict_data_now()\r\n    get_last_category_data()\r\n\r\n    const clickLine = () => {\r\n      kindOfGraph.value='line'\r\n    }\r\n    const clickBar = () => {\r\n      kindOfGraph.value='stick'\r\n      console.log(kindOfGraph)\r\n    }\r\n    return{\r\n      kindOfGraph,clickLine,clickBar\r\n    }\r\n  },\r\n  \r\n}\r\n</script>"],"mappings":"AAkEA,OAAOA,UAAS,MAAO,6BAA4B;AACnD,OAAOC,cAAa,MAAO,iCAAgC;AAC3D,OAAOC,yBAAwB,MAAO,8DAA6D;AACnG,OAAOC,0BAAyB,MAAO,gEAA+D;AACtG,SAAQC,GAAE,QAAS,KAAK;AAExB,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,UAAU,EAAE;IACVN,UAAU;IACVC,cAAc;IACdC,yBAAyB;IACzBC;EACF,CAAC;EAEDI,KAAKA,CAAA,EAAE;IAEL,IAAIC,WAAU,GAAIJ,GAAG,CAAC,MAAM;;IAG5B;IACA,eAAeK,0BAA0BA,CAAA,EAAE;MACzC,IAAIC,GAAE,GAAI,mCAAmC,GAACC,gBAAgB,CAACC,KAAK,GAAC,IAAG;MACxEC,KAAK,CAACC,GAAG,CAACJ,GAAG,EAACK,MAAM,CAAC,CAACC,IAAI,CAACC,GAAG,IAAE;QAC5BC,KAAK,CAACC,MAAM,CAAC,oBAAoB,EAACF,GAAG,CAACG,IAAI;MAC9C,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;QACZC,OAAO,CAACC,GAAG,CAACF,KAAK;MACrB,CAAC,EACAG,OAAO,CAAC,MAAI,CACb,CAAC;IACH;;IAEA;IACA,eAAeC,sBAAsBA,CAAA,EAAE;MACrC,IAAIhB,GAAE,GAAI,+BAA+B,GAACC,gBAAgB,CAACC,KAAK,GAAC,GAAG,GAACe,IAAI,GAAC,SAAS,GAACA,IAAI,GAAC,GAAG,GAACC,KAAK,GAAC,OAAM;MACzGf,KAAK,CAACC,GAAG,CAACJ,GAAG,EAACK,MAAM,CAAC,CAACC,IAAI,CAACC,GAAG,IAAE;QAC5BC,KAAK,CAACC,MAAM,CAAC,8BAA8B,EAACF,GAAG,CAACG,IAAI;MACpD,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK;MACjB,CAAC,EACAG,OAAO,CAAC,MAAI,CACjB,CAAC;IACH;IAEAhB,0BAA0B,EAAC;IAC3BiB,sBAAsB,EAAC;IAEvB,MAAMG,SAAQ,GAAIA,CAAA,KAAM;MACtBrB,WAAW,CAACI,KAAK,GAAC,MAAK;IACzB;IACA,MAAMkB,QAAO,GAAIA,CAAA,KAAM;MACrBtB,WAAW,CAACI,KAAK,GAAC,OAAM;MACxBW,OAAO,CAACC,GAAG,CAAChB,WAAW;IACzB;IACA,OAAM;MACJA,WAAW;MAACqB,SAAS;MAACC;IACxB;EACF;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}